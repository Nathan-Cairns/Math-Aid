package creation;

import java.io.File;
import java.io.IOException;
import java.nio.file.DirectoryNotEmptyException;
import java.nio.file.Files;
import java.nio.file.NoSuchFileException;
import java.nio.file.Path;
import java.nio.file.Paths;

/**
 * A class which implements the Creation interface.
 * This class creates a Creation for the Math-Aids tutoring program.
 * Allows for the creation and use of an mp4 file through the use of the ffmpeg commands.
 * This mp4 file contains recorded audio and blank text displayed on the centre of the screen.
 * This is all generated by the user.
 * 
 * @author Nathan Cairns
 *
 */

public class MathsAidBashCreation implements Creation {
	
	/* MACROS */
	public static final String BASH = "/bin/bash";
	public static final File CREATIONS_FOLDER = new File(
			System.getProperty("user.dir") + System.getProperty("file.separator") + "creations");
	public static final String MP4 = ".mp4";
	public static final String WAV = ".wav";
	public static final String JPG = ".jpg";
	public static final String DIMENSION = "480x360";
	public static final String DEFAULT_COLOUR = "black";
	public static final String DEFAULT_FONT_COLOUR = "yellow";
	public static final int DEFAULT_FONT_SIZE = 50;
	public static final int DEFAULT_LENGTH = 3;
	
	
	/* fields */
	private final String _fullFileName;
	private String _creationName;
	private String _audioComponent; 
	private String _videoComponent; 
	private String _colour;
	private String _fontColour;
	private int _length;
	
	/**
	 * Constructor.
	 * Sets the name of the creation and keeps the default values for the rest.
	 * 
	 * @param name : the name of the creation
	 */
	public MathsAidBashCreation(String name) {
		this(name, DEFAULT_COLOUR, DEFAULT_FONT_COLOUR, DEFAULT_LENGTH);
	}
	
	/**
	 * Constructor.
	 * Sets name and colour, rest kept default.
	 * 
	 * @param name : name of the creation
	 * @param colour : the desired colour
	 */
	public MathsAidBashCreation(String name, String colour) {
		this(name, colour, DEFAULT_FONT_COLOUR, DEFAULT_LENGTH);
	}
	
	/**
	 * Constructor.
	 * Sets the name, colour and font colour, rest kept default.
	 * 
	 * @param name: name of the creation
	 * @param colour: desired colour
	 * @param fontColour: desired font colour
	 */
	public MathsAidBashCreation(String name, String colour, String fontColour) {
		this(name, colour, fontColour, DEFAULT_LENGTH);
	}
	
	/**
	 * Constructor
	 * Sets the name, colour, font colour and length of video.
	 * Also uses the name to set the audio component, video component and full file name fields.
	 * 
	 * @param name: name of the creation
	 * @param colour: desired colour
	 * @param fontColour: desired font colour
	 * @param length: desired video length
	 */
	public MathsAidBashCreation(String name, String colour, String fontColour, int length) {
		if (name == null) {
			throw new CreationException("Invalid creation name (null)");
		}
		if (name == "") {
			throw new CreationException("Invalid creation name ()");
		}
		if (colour == null || colour == "") {
			colour = "blue";
		}
		if (fontColour == null || fontColour == "") {
			fontColour = "white";
		}
		_creationName = name;
		_colour = colour;
		_fontColour = fontColour;
		_length = length;
		
		_audioComponent = name + "_ac." + WAV;
		_videoComponent = name + "_vc." + MP4;
		_fullFileName = _creationName + MP4;
	}
	
	/**
	 * Creates the mp4 file
	 */
	@Override
	public void create() {
		createCreationFolder();
		createAudioComponent();
		createVideoComponent();
		combineAudioAndVideo();
		deleteCreationComponents();
	}
	
	/**
	 * Check if the creation folder exists, if it doesn't: create it!
	 */
	public static void createCreationFolder() {
		if (!CREATIONS_FOLDER.exists()) {
			CREATIONS_FOLDER.mkdir();
		}
	}
	
	/**
	 * Create the video component from the provided text (.mp4 file) 
	 */
	private void createVideoComponent() {
		String command = "ffmpeg -f lavfi -i " + "color=c="+_colour+":s="+DIMENSION+":d="+_length+" -vf "
				+ "\"drawtext=fontfile=/path/to/font.ttf:fontsize="+DEFAULT_FONT_SIZE+":"
				+ " fontcolor="+_fontColour+":x=(w-text_w)/2:y=(h-text_h)/2:text='" + _creationName + "'\" "
				+ "\"" + _videoComponent + "\"";

		processCommand(command);
		
	}
	
	/**
	 * Record the audio and create the audio component as a .wav file
	 */
	private void createAudioComponent() {
		String command = "ffmpeg -f alsa -i \"default\" -t "+ _length +" \"" + _audioComponent + "\"";

		processCommand(command);
	}
	
	/**
	 * Combine the audio and video component, creating the final .mp4 product.
	 */
	private void combineAudioAndVideo() {
		String command = "ffmpeg -i \"" + _videoComponent +"\" -i \"" + _audioComponent + "\" -c:v copy -c:a aac"
				+ " -strict experimental \"" + _fullFileName +"\"";

		processCommand(command);
	}
	
	/**
	 * Delete the audio and video components. 
	 */
	private void deleteCreationComponents() {
		deleteFile(_videoComponent);
		deleteFile(_audioComponent);
	}
	
	/**
	 * Helper method used to delete files
	 * @param filename: the file to be deleted
	 */
	private void deleteFile(String filename) {
		Path path = Paths.get(CREATIONS_FOLDER + System.getProperty("file.separator") + filename);
		try {
			Files.delete(path);
		} catch (NoSuchFileException x) {
			System.err.format("%s: no such" + " file or directory%n", path);
		} catch (DirectoryNotEmptyException x) {
			System.err.format("%s not empty%n", path);
		} catch (IOException x) {
			// File permission problems are caught here.
			System.err.println(x);
		}
	}
	
	/**
	 * Plays the creation
	 */
	public void play() {
		String command = "ffplay -autoexit \""+_fullFileName+"\"";
		
		processCommand(command);
	}
	
	/**
	 * Delete the creation
	 */
	public void delete() {
		deleteFile(_fullFileName);
	}
	
	/**
	 * Return the creation name
	 */
	public String name() {
		return _creationName;
	}
	
	/**
	 * Return the final .mp4 file
	 */
	public File file() {
		return new File(CREATIONS_FOLDER + System.getProperty("file.separator") +_fullFileName);
	}
	
	/**
	 * Helper method which takes a string which represents a ffmpeg
	 * command and uses a process builder to execute it.
	 * 
	 * @param command: ffmpeg command represented as a string.
	 */
	protected final void processCommand(String command) {
		// Make a process builder
		ProcessBuilder pb = new ProcessBuilder(BASH, "-c", command);
		// Set the process builder directory
		pb.directory(CREATIONS_FOLDER);

		try {
			// Start the process
			java.lang.Process process = pb.start();
			process.waitFor();

		} catch (IOException e) {
			e.printStackTrace();
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		
	}
	
}


